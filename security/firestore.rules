rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidRecording() {
      return request.resource.data.keys().hasAll(['userId', 'title', 'audioUrl', 'duration', 'latitude', 'longitude', 'recordedAt', 'isPublic'])
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.title.size() <= 200
        && request.resource.data.duration is number
        && request.resource.data.duration > 0
        && request.resource.data.duration <= 300
        && request.resource.data.latitude is number
        && request.resource.data.longitude is number
        && request.resource.data.isPublic is bool;
    }
    
    // ========== Users Collection ==========
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // ========== Recordings Collection ==========
    match /recordings/{recordingId} {
      allow read: if resource.data.isPublic == true || (isAuthenticated() && request.auth.uid == resource.data.userId);
      allow create: if isAuthenticated() && isValidRecording() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && isValidRecording();
      allow delete: if isOwner(resource.data.userId);
      
      // Sub-collection: Comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0
          && request.resource.data.text.size() <= 500;
        allow update: if isOwner(resource.data.userId);
        allow delete: if isOwner(resource.data.userId);
      }
      
      // Sub-collection: Reactions
      match /reactions/{reactionId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
          && request.resource.data.type in ['like', 'emoji'];
        allow delete: if isOwner(resource.data.userId);
      }
    }
    
    // ========== Comments Collection ==========
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
        && request.resource.data.recordingId is string
        && request.resource.data.text is string
        && request.resource.data.text.size() > 0
        && request.resource.data.text.size() <= 500;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ========== Reactions Collection ==========
    match /reactions/{reactionId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
        && request.resource.data.recordingId is string
        && request.resource.data.type in ['like', 'emoji'];
      allow update: if false; // Reactions are immutable
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ========== Activities Collection ==========
    // Note: Activities are created client-side in Spark plan (no Cloud Functions)
    match /activities/{activityId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ========== Follows Collection ==========
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.followerId == request.auth.uid
        && request.resource.data.followingId is string
        && request.resource.data.followerId != request.resource.data.followingId;
      allow delete: if isOwner(resource.data.followerId);
    }
    
    // ========== User Preferences Collection ==========
    match /userPreferences/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
  }
}
